import { untrack } from "svelte";
import { SvelteMap } from "svelte/reactivity";
import { useRefById } from "svelte-toolbelt";
import { getAriaOrientation, getAriaSelected, getDataDisabled, getDataOrientation, getDisabled, getHidden, } from "../../internal/attrs.js";
import { kbd } from "../../internal/kbd.js";
import { useRovingFocus, } from "../../internal/use-roving-focus.svelte.js";
import { createContext } from "../../internal/create-context.js";
const ROOT_ATTR = "data-tabs-root";
const LIST_ATTR = "data-tabs-list";
const TRIGGER_ATTR = "data-tabs-trigger";
const CONTENT_ATTR = "data-tabs-content";
class TabsRootState {
    #id;
    ref;
    orientation;
    loop;
    activationMode;
    value;
    disabled;
    rovingFocusGroup;
    triggerIds = $state([]);
    // holds the trigger ID for each value to associate it with the content
    valueToTriggerId = new SvelteMap();
    // holds the content ID for each value to associate it with the trigger
    valueToContentId = new SvelteMap();
    constructor(props) {
        this.#id = props.id;
        this.ref = props.ref;
        this.orientation = props.orientation;
        this.loop = props.loop;
        this.activationMode = props.activationMode;
        this.value = props.value;
        this.disabled = props.disabled;
        useRefById({
            id: this.#id,
            ref: this.ref,
        });
        this.rovingFocusGroup = useRovingFocus({
            candidateAttr: TRIGGER_ATTR,
            rootNodeId: this.#id,
            loop: this.loop,
            orientation: this.orientation,
        });
    }
    registerTrigger = (id, value) => {
        this.triggerIds.push(id);
        this.valueToTriggerId.set(value, id);
        // returns the deregister function
        return () => {
            this.triggerIds = this.triggerIds.filter((triggerId) => triggerId !== id);
            this.valueToTriggerId.delete(value);
        };
    };
    registerContent = (id, value) => {
        this.valueToContentId.set(value, id);
        // returns the deregister function
        return () => {
            this.valueToContentId.delete(value);
        };
    };
    setValue = (v) => {
        this.value.current = v;
    };
    props = $derived.by(() => ({
        id: this.#id.current,
        "data-orientation": getDataOrientation(this.orientation.current),
        [ROOT_ATTR]: "",
    }));
}
class TabsListState {
    #id;
    #ref;
    #root;
    #isDisabled = $derived.by(() => this.#root.disabled.current);
    constructor(props, root) {
        this.#root = root;
        this.#id = props.id;
        this.#ref = props.ref;
        useRefById({
            id: this.#id,
            ref: this.#ref,
        });
    }
    props = $derived.by(() => ({
        id: this.#id.current,
        role: "tablist",
        "aria-orientation": getAriaOrientation(this.#root.orientation.current),
        "data-orientation": getDataOrientation(this.#root.orientation.current),
        [LIST_ATTR]: "",
        "data-disabled": getDataDisabled(this.#isDisabled),
    }));
}
class TabsTriggerState {
    #root;
    #id;
    #ref;
    #disabled;
    #value;
    #isActive = $derived.by(() => this.#root.value.current === this.#value.current);
    #isDisabled = $derived.by(() => this.#disabled.current || this.#root.disabled.current);
    #tabIndex = $state(0);
    #ariaControls = $derived.by(() => this.#root.valueToContentId.get(this.#value.current));
    constructor(props, root) {
        this.#root = root;
        this.#id = props.id;
        this.#ref = props.ref;
        this.#value = props.value;
        this.#disabled = props.disabled;
        useRefById({
            id: this.#id,
            ref: this.#ref,
        });
        $effect(() => {
            // we want to track the value & id
            const id = this.#id.current;
            const value = this.#value.current;
            return untrack(() => {
                const deregister = this.#root.registerTrigger(id, value);
                return () => {
                    deregister();
                };
            });
        });
        $effect(() => {
            this.#root.triggerIds.length;
            if (this.#isActive || !this.#root.value.current) {
                this.#tabIndex = 0;
            }
            else {
                this.#tabIndex = -1;
            }
        });
    }
    activate = () => {
        if (this.#root.value.current === this.#value.current)
            return;
        this.#root.setValue(this.#value.current);
    };
    #onfocus = () => {
        if (this.#root.activationMode.current !== "automatic" || this.#isDisabled)
            return;
        this.activate();
    };
    #onclick = (e) => {
        if (this.#isDisabled)
            return;
        this.activate();
    };
    #onkeydown = (e) => {
        if (this.#isDisabled)
            return;
        if (e.key === kbd.SPACE || e.key === kbd.ENTER) {
            e.preventDefault();
            this.activate();
            return;
        }
        this.#root.rovingFocusGroup.handleKeydown(this.#ref.current, e);
    };
    props = $derived.by(() => ({
        id: this.#id.current,
        role: "tab",
        "data-state": getTabDataState(this.#isActive),
        "data-value": this.#value.current,
        "data-orientation": getDataOrientation(this.#root.orientation.current),
        "data-disabled": getDataDisabled(this.#isDisabled),
        "aria-selected": getAriaSelected(this.#isActive),
        "aria-controls": this.#ariaControls,
        [TRIGGER_ATTR]: "",
        disabled: getDisabled(this.#isDisabled),
        tabindex: this.#tabIndex,
        //
        onclick: this.#onclick,
        onfocus: this.#onfocus,
        onkeydown: this.#onkeydown,
    }));
}
class TabsContentState {
    #root;
    #id;
    #ref;
    #value;
    #isActive = $derived.by(() => this.#root.value.current === this.#value.current);
    #ariaLabelledBy = $derived.by(() => this.#root.valueToTriggerId.get(this.#value.current));
    constructor(props, root) {
        this.#root = root;
        this.#value = props.value;
        this.#id = props.id;
        this.#ref = props.ref;
        useRefById({
            id: this.#id,
            ref: this.#ref,
        });
        $effect(() => {
            // we want to track the value & id
            const id = this.#id.current;
            const value = this.#value.current;
            untrack(() => {
                const deregister = this.#root.registerContent(id, value);
                return () => {
                    deregister();
                };
            });
        });
    }
    props = $derived.by(() => ({
        id: this.#id.current,
        role: "tabpanel",
        hidden: getHidden(!this.#isActive),
        tabindex: 0,
        "data-value": this.#value.current,
        "data-state": getTabDataState(this.#isActive),
        "aria-labelledby": this.#ariaLabelledBy,
        [CONTENT_ATTR]: "",
    }));
}
//
// CONTEXT METHODS
//
const [setTabsRootContext, getTabsRootContext] = createContext("Tabs.Root");
export function useTabsRoot(props) {
    return setTabsRootContext(new TabsRootState(props));
}
export function useTabsTrigger(props) {
    return new TabsTriggerState(props, getTabsRootContext());
}
export function useTabsList(props) {
    return new TabsListState(props, getTabsRootContext());
}
export function useTabsContent(props) {
    return new TabsContentState(props, getTabsRootContext());
}
//
// HELPERS
//
function getTabDataState(condition) {
    return condition ? "active" : "inactive";
}
