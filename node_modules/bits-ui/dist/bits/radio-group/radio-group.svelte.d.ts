import type { FocusEventHandler, KeyboardEventHandler, MouseEventHandler } from "svelte/elements";
import type { ReadableBoxedValues, WritableBoxedValues } from "../../internal/box.svelte.js";
import type { WithRefProps } from "../../internal/types.js";
import type { Orientation } from "../../shared/index.js";
import { type UseRovingFocusReturn } from "../../internal/use-roving-focus.svelte.js";
type RadioGroupRootStateProps = WithRefProps<ReadableBoxedValues<{
    disabled: boolean;
    required: boolean;
    loop: boolean;
    orientation: Orientation;
    name: string | undefined;
}> & WritableBoxedValues<{
    value: string;
}>>;
declare class RadioGroupRootState {
    #private;
    disabled: RadioGroupRootStateProps["disabled"];
    required: RadioGroupRootStateProps["required"];
    loop: RadioGroupRootStateProps["loop"];
    orientation: RadioGroupRootStateProps["orientation"];
    name: RadioGroupRootStateProps["name"];
    value: RadioGroupRootStateProps["value"];
    rovingFocusGroup: UseRovingFocusReturn;
    hasValue: boolean;
    constructor(props: RadioGroupRootStateProps);
    isChecked: (value: string) => boolean;
    setValue: (value: string) => void;
    props: {
        readonly id: string;
        readonly role: "radiogroup";
        readonly "aria-required": "true" | "false";
        readonly "data-disabled": "" | undefined;
        readonly "data-orientation": Orientation;
        readonly "data-radio-group-root": "";
    };
}
type RadioGroupItemStateProps = WithRefProps<ReadableBoxedValues<{
    disabled: boolean;
    value: string;
}>>;
declare class RadioGroupItemState {
    #private;
    checked: boolean;
    constructor(props: RadioGroupItemStateProps, root: RadioGroupRootState);
    snippetProps: {
        checked: boolean;
    };
    props: {
        readonly id: string;
        readonly disabled: true | undefined;
        readonly "data-value": string;
        readonly "data-orientation": Orientation;
        readonly "data-disabled": "" | undefined;
        readonly "data-state": "checked" | "unchecked";
        readonly "aria-checked": "true" | "false" | "mixed";
        readonly "data-radio-group-item": "";
        readonly type: "button";
        readonly role: "radio";
        readonly tabindex: number;
        readonly onkeydown: KeyboardEventHandler<HTMLButtonElement>;
        readonly onfocus: FocusEventHandler<HTMLButtonElement>;
        readonly onclick: MouseEventHandler<HTMLButtonElement>;
    };
}
declare class RadioGroupInputState {
    #private;
    shouldRender: boolean;
    props: {
        readonly name: string | undefined;
        readonly value: string;
        readonly required: boolean;
        readonly disabled: boolean;
        readonly "aria-hidden": "true";
        readonly hidden: true;
        readonly style: string;
        readonly tabIndex: -1;
    };
    constructor(root: RadioGroupRootState);
}
export declare function useRadioGroupRoot(props: RadioGroupRootStateProps): RadioGroupRootState;
export declare function useRadioGroupItem(props: RadioGroupItemStateProps): RadioGroupItemState;
export declare function useRadioGroupInput(): RadioGroupInputState;
export {};
