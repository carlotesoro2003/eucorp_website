import { srOnlyStyles, styleToString, useRefById } from "svelte-toolbelt";
import { getAriaChecked, getAriaRequired, getDataDisabled } from "../../internal/attrs.js";
import { useRovingFocus, } from "../../internal/use-roving-focus.svelte.js";
import { createContext } from "../../internal/create-context.js";
import { kbd } from "../../internal/kbd.js";
const RADIO_GROUP_ROOT_ATTR = "data-radio-group-root";
const RADIO_GROUP_ITEM_ATTR = "data-radio-group-item";
class RadioGroupRootState {
    #id;
    #ref;
    disabled;
    required;
    loop;
    orientation;
    name;
    value;
    rovingFocusGroup;
    hasValue = $derived.by(() => this.value.current !== "");
    constructor(props) {
        this.#id = props.id;
        this.disabled = props.disabled;
        this.required = props.required;
        this.loop = props.loop;
        this.orientation = props.orientation;
        this.name = props.name;
        this.value = props.value;
        this.#ref = props.ref;
        this.rovingFocusGroup = useRovingFocus({
            rootNodeId: this.#id,
            candidateAttr: RADIO_GROUP_ITEM_ATTR,
            loop: this.loop,
            orientation: this.orientation,
        });
        useRefById({
            id: this.#id,
            ref: this.#ref,
        });
    }
    isChecked = (value) => {
        return this.value.current === value;
    };
    setValue = (value) => {
        this.value.current = value;
    };
    props = $derived.by(() => ({
        id: this.#id.current,
        role: "radiogroup",
        "aria-required": getAriaRequired(this.required.current),
        "data-disabled": getDataDisabled(this.disabled.current),
        "data-orientation": this.orientation.current,
        [RADIO_GROUP_ROOT_ATTR]: "",
    }));
}
class RadioGroupItemState {
    #id;
    #ref;
    #root;
    #disabled;
    #value;
    checked = $derived.by(() => this.#root.value.current === this.#value.current);
    #isDisabled = $derived.by(() => this.#disabled.current || this.#root.disabled.current);
    #isChecked = $derived.by(() => this.#root.isChecked(this.#value.current));
    constructor(props, root) {
        this.#disabled = props.disabled;
        this.#value = props.value;
        this.#root = root;
        this.#id = props.id;
        this.#ref = props.ref;
        useRefById({
            id: this.#id,
            ref: this.#ref,
        });
        $effect(() => {
            this.#tabIndex = this.#root.rovingFocusGroup.getTabIndex(this.#ref.current);
        });
    }
    #onclick = (e) => {
        if (this.#disabled.current)
            return;
        this.#root.setValue(this.#value.current);
    };
    #onfocus = () => {
        if (!this.#root.hasValue)
            return;
        this.#root.setValue(this.#value.current);
    };
    #onkeydown = (e) => {
        if (this.#isDisabled)
            return;
        if (e.key === kbd.SPACE) {
            e.preventDefault();
            this.#root.setValue(this.#value.current);
            return;
        }
        this.#root.rovingFocusGroup.handleKeydown(this.#ref.current, e, true);
    };
    #tabIndex = $state(0);
    snippetProps = $derived.by(() => ({ checked: this.#isChecked }));
    props = $derived.by(() => ({
        id: this.#id.current,
        disabled: this.#isDisabled ? true : undefined,
        "data-value": this.#value.current,
        "data-orientation": this.#root.orientation.current,
        "data-disabled": getDataDisabled(this.#isDisabled),
        "data-state": this.#isChecked ? "checked" : "unchecked",
        "aria-checked": getAriaChecked(this.#isChecked, false),
        [RADIO_GROUP_ITEM_ATTR]: "",
        type: "button",
        role: "radio",
        tabindex: this.#tabIndex,
        //
        onkeydown: this.#onkeydown,
        onfocus: this.#onfocus,
        onclick: this.#onclick,
    }));
}
//
// INPUT
//
class RadioGroupInputState {
    #root;
    shouldRender = $derived.by(() => this.#root.name.current !== undefined);
    props = $derived.by(() => ({
        name: this.#root.name.current,
        value: this.#root.value.current,
        required: this.#root.required.current,
        disabled: this.#root.disabled.current,
        "aria-hidden": "true",
        hidden: true,
        style: styleToString(srOnlyStyles),
        tabIndex: -1,
    }));
    constructor(root) {
        this.#root = root;
    }
}
//
// CONTEXT METHODS
//
const [setRadioGroupRootContext, getRadioGroupRootContext] = createContext("RadioGroup.Root");
export function useRadioGroupRoot(props) {
    return setRadioGroupRootContext(new RadioGroupRootState(props));
}
export function useRadioGroupItem(props) {
    return new RadioGroupItemState(props, getRadioGroupRootContext());
}
export function useRadioGroupInput() {
    return new RadioGroupInputState(getRadioGroupRootContext());
}
