{
  "version": 3,
  "sources": ["../../mode-watcher/dist/without-transition.js", "../../mode-watcher/dist/utils.js", "../../mode-watcher/dist/stores.js", "../../mode-watcher/dist/mode.js", "../../mode-watcher/dist/mode-watcher-lite.svelte", "../../mode-watcher/dist/mode-watcher-full.svelte", "../../mode-watcher/dist/mode-watcher.svelte"],
  "sourcesContent": ["// Original Source: https://reemus.dev/article/disable-css-transition-color-scheme-change#heading-ultimate-solution-for-changing-color-scheme-without-transitions\r\nlet timeoutAction;\r\nlet timeoutEnable;\r\n// Perform a task without any css transitions\r\n// eslint-disable-next-line ts/no-explicit-any\r\nexport function withoutTransition(action) {\r\n    if (typeof document === \"undefined\")\r\n        return;\r\n    // Clear fallback timeouts\r\n    clearTimeout(timeoutAction);\r\n    clearTimeout(timeoutEnable);\r\n    // Create style element to disable transitions\r\n    const style = document.createElement(\"style\");\r\n    const css = document.createTextNode(`* {\r\n     -webkit-transition: none !important;\r\n     -moz-transition: none !important;\r\n     -o-transition: none !important;\r\n     -ms-transition: none !important;\r\n     transition: none !important;\r\n  }`);\r\n    style.appendChild(css);\r\n    // Functions to insert and remove style element\r\n    const disable = () => document.head.appendChild(style);\r\n    const enable = () => document.head.removeChild(style);\r\n    // Best method, getComputedStyle forces browser to repaint\r\n    if (typeof window.getComputedStyle !== \"undefined\") {\r\n        disable();\r\n        action();\r\n        // eslint-disable-next-line ts/no-unused-expressions -- this is a side effect\r\n        window.getComputedStyle(style).opacity;\r\n        enable();\r\n        return;\r\n    }\r\n    // Better method, requestAnimationFrame processes function before next repaint\r\n    if (typeof window.requestAnimationFrame !== \"undefined\") {\r\n        disable();\r\n        action();\r\n        window.requestAnimationFrame(enable);\r\n        return;\r\n    }\r\n    // Fallback\r\n    disable();\r\n    timeoutAction = window.setTimeout(() => {\r\n        action();\r\n        timeoutEnable = window.setTimeout(enable, 120);\r\n    }, 120);\r\n}\r\n", "/**\r\n * Santizes an array of classnames by removing any empty strings.\r\n */\r\nexport function sanitizeClassNames(classNames) {\r\n    return classNames.filter((className) => className.length > 0);\r\n}\r\n", "import { derived, get, writable } from \"svelte/store\";\r\nimport { withoutTransition } from \"./without-transition.js\";\r\nimport { sanitizeClassNames } from \"./utils.js\";\r\n// saves having to branch for server vs client\r\nconst noopStorage = {\r\n    getItem: (_key) => null,\r\n    setItem: (_key, _value) => { },\r\n};\r\n// whether we are running on server vs client\r\nconst isBrowser = typeof document !== \"undefined\";\r\n/**  the modes that are supported, used for validation & type derivation */\r\nexport const modes = [\"dark\", \"light\", \"system\"];\r\n/**\r\n * The key used to store the `mode` in localStorage.\r\n */\r\nexport const modeStorageKey = writable(\"mode-watcher-mode\");\r\n/**\r\n * The key used to store the `theme` in localStorage.\r\n */\r\nexport const themeStorageKey = writable(\"mode-watcher-theme\");\r\n/**\r\n * Writable store that represents the user's preferred mode (`\"dark\"`, `\"light\"` or `\"system\"`)\r\n */\r\nexport const userPrefersMode = createUserPrefersMode();\r\n/**\r\n * Readable store that represents the system's preferred mode (`\"dark\"`, `\"light\"` or `undefined`)\r\n */\r\nexport const systemPrefersMode = createSystemMode();\r\n/**\r\n * Theme colors for light and dark modes.\r\n */\r\nexport const themeColors = writable(undefined);\r\n/**\r\n * A custom theme to apply and persist to the root `html` element.\r\n */\r\nexport const theme = createCustomTheme();\r\n/**\r\n * Whether to disable transitions when changing the mode.\r\n */\r\nexport const disableTransitions = writable(true);\r\n/**\r\n * The classnames to add to the root `html` element when the mode is dark.\r\n */\r\nexport const darkClassNames = writable([]);\r\n/**\r\n * The classnames to add to the root `html` element when the mode is light.\r\n */\r\nexport const lightClassNames = writable([]);\r\n/**\r\n * Derived store that represents the current mode (`\"dark\"`, `\"light\"` or `undefined`)\r\n */\r\nexport const derivedMode = createDerivedMode();\r\n/**\r\n * Derived store that represents the current custom theme\r\n */\r\nexport const derivedTheme = createDerivedTheme();\r\n// derived from: https://github.com/CaptainCodeman/svelte-web-storage\r\nfunction createUserPrefersMode() {\r\n    const defaultValue = \"system\";\r\n    const storage = isBrowser ? localStorage : noopStorage;\r\n    const initialValue = storage.getItem(getModeStorageKey());\r\n    let value = isValidMode(initialValue) ? initialValue : defaultValue;\r\n    function getModeStorageKey() {\r\n        return get(modeStorageKey);\r\n    }\r\n    const { subscribe, set: _set } = writable(value, () => {\r\n        if (!isBrowser)\r\n            return;\r\n        const handler = (e) => {\r\n            if (e.key !== getModeStorageKey())\r\n                return;\r\n            const newValue = e.newValue;\r\n            if (isValidMode(newValue)) {\r\n                _set((value = newValue));\r\n            }\r\n            else {\r\n                _set((value = defaultValue));\r\n            }\r\n        };\r\n        addEventListener(\"storage\", handler);\r\n        return () => removeEventListener(\"storage\", handler);\r\n    });\r\n    function set(v) {\r\n        _set((value = v));\r\n        storage.setItem(getModeStorageKey(), value);\r\n    }\r\n    return {\r\n        subscribe,\r\n        set,\r\n    };\r\n}\r\nfunction createCustomTheme() {\r\n    const storage = isBrowser ? localStorage : noopStorage;\r\n    const initialValue = storage.getItem(getThemeStorageKey());\r\n    let value = initialValue === null || initialValue === undefined ? \"\" : initialValue;\r\n    function getThemeStorageKey() {\r\n        return get(themeStorageKey);\r\n    }\r\n    const { subscribe, set: _set } = writable(value, () => {\r\n        if (!isBrowser)\r\n            return;\r\n        const handler = (e) => {\r\n            if (e.key !== getThemeStorageKey())\r\n                return;\r\n            const newValue = e.newValue;\r\n            if (newValue === null) {\r\n                _set((value = \"\"));\r\n            }\r\n            else {\r\n                _set((value = newValue));\r\n            }\r\n        };\r\n        addEventListener(\"storage\", handler);\r\n        return () => removeEventListener(\"storage\", handler);\r\n    });\r\n    function set(v) {\r\n        _set((value = v));\r\n        storage.setItem(getThemeStorageKey(), value);\r\n    }\r\n    return {\r\n        subscribe,\r\n        set,\r\n    };\r\n}\r\nfunction createSystemMode() {\r\n    const defaultValue = undefined;\r\n    let track = true;\r\n    const { subscribe, set } = writable(defaultValue, () => {\r\n        if (!isBrowser)\r\n            return;\r\n        const handler = (e) => {\r\n            if (!track)\r\n                return;\r\n            set(e.matches ? \"light\" : \"dark\");\r\n        };\r\n        const mediaQueryState = window.matchMedia(\"(prefers-color-scheme: light)\");\r\n        mediaQueryState.addEventListener(\"change\", handler);\r\n        return () => mediaQueryState.removeEventListener(\"change\", handler);\r\n    });\r\n    /**\r\n     * Query system preferences and update the store.\r\n     */\r\n    function query() {\r\n        if (!isBrowser)\r\n            return;\r\n        const mediaQueryState = window.matchMedia(\"(prefers-color-scheme: light)\");\r\n        set(mediaQueryState.matches ? \"light\" : \"dark\");\r\n    }\r\n    /**\r\n     * Enable or disable tracking of system preference changes.\r\n     */\r\n    function tracking(active) {\r\n        track = active;\r\n    }\r\n    return {\r\n        subscribe,\r\n        query,\r\n        tracking,\r\n    };\r\n}\r\nfunction createDerivedMode() {\r\n    const { subscribe } = derived([\r\n        userPrefersMode,\r\n        systemPrefersMode,\r\n        themeColors,\r\n        disableTransitions,\r\n        darkClassNames,\r\n        lightClassNames,\r\n    ], ([$userPrefersMode, $systemPrefersMode, $themeColors, $disableTransitions, $darkClassNames, $lightClassNames,]) => {\r\n        if (!isBrowser)\r\n            return undefined;\r\n        const derivedMode = $userPrefersMode === \"system\" ? $systemPrefersMode : $userPrefersMode;\r\n        const sanitizedDarkClassNames = sanitizeClassNames($darkClassNames);\r\n        const sanitizedLightClassNames = sanitizeClassNames($lightClassNames);\r\n        function update() {\r\n            const htmlEl = document.documentElement;\r\n            const themeColorEl = document.querySelector('meta[name=\"theme-color\"]');\r\n            if (derivedMode === \"light\") {\r\n                if (sanitizedDarkClassNames.length)\r\n                    htmlEl.classList.remove(...sanitizedDarkClassNames);\r\n                if (sanitizedLightClassNames.length)\r\n                    htmlEl.classList.add(...sanitizedLightClassNames);\r\n                htmlEl.style.colorScheme = \"light\";\r\n                if (themeColorEl && $themeColors) {\r\n                    themeColorEl.setAttribute(\"content\", $themeColors.light);\r\n                }\r\n            }\r\n            else {\r\n                if (sanitizedLightClassNames.length)\r\n                    htmlEl.classList.remove(...sanitizedLightClassNames);\r\n                if (sanitizedDarkClassNames.length)\r\n                    htmlEl.classList.add(...sanitizedDarkClassNames);\r\n                htmlEl.style.colorScheme = \"dark\";\r\n                if (themeColorEl && $themeColors) {\r\n                    themeColorEl.setAttribute(\"content\", $themeColors.dark);\r\n                }\r\n            }\r\n        }\r\n        if ($disableTransitions) {\r\n            withoutTransition(update);\r\n        }\r\n        else {\r\n            update();\r\n        }\r\n        return derivedMode;\r\n    });\r\n    return {\r\n        subscribe,\r\n    };\r\n}\r\nfunction createDerivedTheme() {\r\n    const { subscribe } = derived([theme, disableTransitions], ([$theme, $disableTransitions]) => {\r\n        if (!isBrowser)\r\n            return undefined;\r\n        function update() {\r\n            const htmlEl = document.documentElement;\r\n            htmlEl.setAttribute(\"data-theme\", $theme);\r\n        }\r\n        if ($disableTransitions) {\r\n            withoutTransition(update);\r\n        }\r\n        else {\r\n            update();\r\n        }\r\n        return $theme;\r\n    });\r\n    return {\r\n        subscribe,\r\n    };\r\n}\r\nexport function isValidMode(value) {\r\n    if (typeof value !== \"string\")\r\n        return false;\r\n    return modes.includes(value);\r\n}\r\n", "import { get } from \"svelte/store\";\r\nimport { derivedMode, derivedTheme, disableTransitions, modeStorageKey, systemPrefersMode, themeColors, themeStorageKey, theme as themeStore, userPrefersMode, } from \"./stores.js\";\r\n/** Toggle between light and dark mode */\r\nexport function toggleMode() {\r\n    userPrefersMode.set(get(derivedMode) === \"dark\" ? \"light\" : \"dark\");\r\n}\r\n/** Set the mode to light or dark */\r\nexport function setMode(mode) {\r\n    userPrefersMode.set(mode);\r\n}\r\n/** Reset the mode to operating system preference */\r\nexport function resetMode() {\r\n    userPrefersMode.set(\"system\");\r\n}\r\n/** Set the theme to a custom value */\r\nexport function setTheme(theme) {\r\n    themeStore.set(theme);\r\n}\r\nexport function defineConfig(config) {\r\n    return config;\r\n}\r\n/** Used to set the mode on initial page load to prevent FOUC */\r\nexport function setInitialMode({ defaultMode = \"system\", themeColors, darkClassNames = [\"dark\"], lightClassNames = [], defaultTheme = \"\", modeStorageKey = \"mode-watcher-mode\", themeStorageKey = \"mode-watcher-theme\", }) {\r\n    const rootEl = document.documentElement;\r\n    const mode = localStorage.getItem(modeStorageKey) || defaultMode;\r\n    const theme = localStorage.getItem(themeStorageKey) || defaultTheme;\r\n    const light = mode === \"light\" ||\r\n        (mode === \"system\" && window.matchMedia(\"(prefers-color-scheme: light)\").matches);\r\n    if (light) {\r\n        if (darkClassNames.length)\r\n            rootEl.classList.remove(...darkClassNames);\r\n        if (lightClassNames.length)\r\n            rootEl.classList.add(...lightClassNames);\r\n    }\r\n    else {\r\n        if (lightClassNames.length)\r\n            rootEl.classList.remove(...lightClassNames);\r\n        if (darkClassNames.length)\r\n            rootEl.classList.add(...darkClassNames);\r\n    }\r\n    rootEl.style.colorScheme = light ? \"light\" : \"dark\";\r\n    if (themeColors) {\r\n        const themeMetaEl = document.querySelector('meta[name=\"theme-color\"]');\r\n        if (themeMetaEl) {\r\n            themeMetaEl.setAttribute(\"content\", mode === \"light\" ? themeColors.light : themeColors.dark);\r\n        }\r\n    }\r\n    if (theme) {\r\n        rootEl.setAttribute(\"data-theme\", theme);\r\n        localStorage.setItem(themeStorageKey, theme);\r\n    }\r\n    localStorage.setItem(modeStorageKey, mode);\r\n}\r\n/**\r\n * A type-safe way to generate the source expression used to set the initial mode and avoid FOUC.\r\n */\r\nexport function generateSetInitialModeExpression(config = {}) {\r\n    return `(${setInitialMode.toString()})(${JSON.stringify(config)});`;\r\n}\r\nexport { modeStorageKey, themeStorageKey, derivedTheme as theme, userPrefersMode, systemPrefersMode, derivedMode as mode, themeColors, disableTransitions, };\r\n", null, null, null],
  "mappings": "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",
  "names": ["get", "set", "derivedMode", "get", "theme", "themeColors", "darkClassNames", "lightClassNames", "modeStorageKey", "themeStorageKey", "themeColors", "$$anchor", "themeColors", "$$anchor", "themeColors", "disableTransitions", "darkClassNames", "lightClassNames", "themeStorageKey", "modeStorageKey"]
}
