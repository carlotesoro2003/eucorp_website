{
  "version": 3,
  "sources": ["../../inline-style-parser/index.js", "../../style-to-object/src/index.ts", "../../style-to-object/esm/index.mjs"],
  "sourcesContent": ["// http://www.w3.org/TR/CSS21/grammar.html\r\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\r\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\r\n\r\nvar NEWLINE_REGEX = /\\n/g;\r\nvar WHITESPACE_REGEX = /^\\s*/;\r\n\r\n// declaration\r\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\r\nvar COLON_REGEX = /^:\\s*/;\r\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\r\nvar SEMICOLON_REGEX = /^[;\\s]*/;\r\n\r\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\r\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\r\n\r\n// strings\r\nvar NEWLINE = '\\n';\r\nvar FORWARD_SLASH = '/';\r\nvar ASTERISK = '*';\r\nvar EMPTY_STRING = '';\r\n\r\n// types\r\nvar TYPE_COMMENT = 'comment';\r\nvar TYPE_DECLARATION = 'declaration';\r\n\r\n/**\r\n * @param {String} style\r\n * @param {Object} [options]\r\n * @return {Object[]}\r\n * @throws {TypeError}\r\n * @throws {Error}\r\n */\r\nmodule.exports = function (style, options) {\r\n  if (typeof style !== 'string') {\r\n    throw new TypeError('First argument must be a string');\r\n  }\r\n\r\n  if (!style) return [];\r\n\r\n  options = options || {};\r\n\r\n  /**\r\n   * Positional.\r\n   */\r\n  var lineno = 1;\r\n  var column = 1;\r\n\r\n  /**\r\n   * Update lineno and column based on `str`.\r\n   *\r\n   * @param {String} str\r\n   */\r\n  function updatePosition(str) {\r\n    var lines = str.match(NEWLINE_REGEX);\r\n    if (lines) lineno += lines.length;\r\n    var i = str.lastIndexOf(NEWLINE);\r\n    column = ~i ? str.length - i : column + str.length;\r\n  }\r\n\r\n  /**\r\n   * Mark position and patch `node.position`.\r\n   *\r\n   * @return {Function}\r\n   */\r\n  function position() {\r\n    var start = { line: lineno, column: column };\r\n    return function (node) {\r\n      node.position = new Position(start);\r\n      whitespace();\r\n      return node;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Store position information for a node.\r\n   *\r\n   * @constructor\r\n   * @property {Object} start\r\n   * @property {Object} end\r\n   * @property {undefined|String} source\r\n   */\r\n  function Position(start) {\r\n    this.start = start;\r\n    this.end = { line: lineno, column: column };\r\n    this.source = options.source;\r\n  }\r\n\r\n  /**\r\n   * Non-enumerable source string.\r\n   */\r\n  Position.prototype.content = style;\r\n\r\n  var errorsList = [];\r\n\r\n  /**\r\n   * Error `msg`.\r\n   *\r\n   * @param {String} msg\r\n   * @throws {Error}\r\n   */\r\n  function error(msg) {\r\n    var err = new Error(\r\n      options.source + ':' + lineno + ':' + column + ': ' + msg\r\n    );\r\n    err.reason = msg;\r\n    err.filename = options.source;\r\n    err.line = lineno;\r\n    err.column = column;\r\n    err.source = style;\r\n\r\n    if (options.silent) {\r\n      errorsList.push(err);\r\n    } else {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Match `re` and return captures.\r\n   *\r\n   * @param {RegExp} re\r\n   * @return {undefined|Array}\r\n   */\r\n  function match(re) {\r\n    var m = re.exec(style);\r\n    if (!m) return;\r\n    var str = m[0];\r\n    updatePosition(str);\r\n    style = style.slice(str.length);\r\n    return m;\r\n  }\r\n\r\n  /**\r\n   * Parse whitespace.\r\n   */\r\n  function whitespace() {\r\n    match(WHITESPACE_REGEX);\r\n  }\r\n\r\n  /**\r\n   * Parse comments.\r\n   *\r\n   * @param {Object[]} [rules]\r\n   * @return {Object[]}\r\n   */\r\n  function comments(rules) {\r\n    var c;\r\n    rules = rules || [];\r\n    while ((c = comment())) {\r\n      if (c !== false) {\r\n        rules.push(c);\r\n      }\r\n    }\r\n    return rules;\r\n  }\r\n\r\n  /**\r\n   * Parse comment.\r\n   *\r\n   * @return {Object}\r\n   * @throws {Error}\r\n   */\r\n  function comment() {\r\n    var pos = position();\r\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\r\n\r\n    var i = 2;\r\n    while (\r\n      EMPTY_STRING != style.charAt(i) &&\r\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\r\n    ) {\r\n      ++i;\r\n    }\r\n    i += 2;\r\n\r\n    if (EMPTY_STRING === style.charAt(i - 1)) {\r\n      return error('End of comment missing');\r\n    }\r\n\r\n    var str = style.slice(2, i - 2);\r\n    column += 2;\r\n    updatePosition(str);\r\n    style = style.slice(i);\r\n    column += 2;\r\n\r\n    return pos({\r\n      type: TYPE_COMMENT,\r\n      comment: str\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Parse declaration.\r\n   *\r\n   * @return {Object}\r\n   * @throws {Error}\r\n   */\r\n  function declaration() {\r\n    var pos = position();\r\n\r\n    // prop\r\n    var prop = match(PROPERTY_REGEX);\r\n    if (!prop) return;\r\n    comment();\r\n\r\n    // :\r\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\r\n\r\n    // val\r\n    var val = match(VALUE_REGEX);\r\n\r\n    var ret = pos({\r\n      type: TYPE_DECLARATION,\r\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\r\n      value: val\r\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\r\n        : EMPTY_STRING\r\n    });\r\n\r\n    // ;\r\n    match(SEMICOLON_REGEX);\r\n\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * Parse declarations.\r\n   *\r\n   * @return {Object[]}\r\n   */\r\n  function declarations() {\r\n    var decls = [];\r\n\r\n    comments(decls);\r\n\r\n    // declarations\r\n    var decl;\r\n    while ((decl = declaration())) {\r\n      if (decl !== false) {\r\n        decls.push(decl);\r\n        comments(decls);\r\n      }\r\n    }\r\n\r\n    return decls;\r\n  }\r\n\r\n  whitespace();\r\n  return declarations();\r\n};\r\n\r\n/**\r\n * Trim `str`.\r\n *\r\n * @param {String} str\r\n * @return {String}\r\n */\r\nfunction trim(str) {\r\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\r\n}\r\n", "import type { Declaration } from 'inline-style-parser';\r\nimport parse from 'inline-style-parser';\r\n\r\nexport { Declaration };\r\n\r\ninterface StyleObject {\r\n  [name: string]: string;\r\n}\r\n\r\ntype Iterator = (\r\n  property: string,\r\n  value: string,\r\n  declaration: Declaration,\r\n) => void;\r\n\r\n/**\r\n * Parses inline style to object.\r\n *\r\n * @param style - Inline style.\r\n * @param iterator - Iterator.\r\n * @returns - Style object or null.\r\n *\r\n * @example Parsing inline style to object:\r\n *\r\n * ```js\r\n * import parse from 'style-to-object';\r\n * parse('line-height: 42;'); // { 'line-height': '42' }\r\n * ```\r\n */\r\nexport default function StyleToObject(\r\n  style: string,\r\n  iterator?: Iterator,\r\n): StyleObject | null {\r\n  let styleObject: StyleObject | null = null;\r\n\r\n  if (!style || typeof style !== 'string') {\r\n    return styleObject;\r\n  }\r\n\r\n  const declarations = parse(style);\r\n  const hasIterator = typeof iterator === 'function';\r\n\r\n  declarations.forEach((declaration) => {\r\n    if (declaration.type !== 'declaration') {\r\n      return;\r\n    }\r\n\r\n    const { property, value } = declaration;\r\n\r\n    if (hasIterator) {\r\n      iterator(property, value, declaration);\r\n    } else if (value) {\r\n      styleObject = styleObject || {};\r\n      styleObject[property] = value;\r\n    }\r\n  });\r\n\r\n  return styleObject;\r\n}\r\n", "import StyleToObject from '../cjs/index.js';\r\n\r\n// ensure compatibility with rollup umd build\r\nexport default StyleToObject.default || StyleToObject;\r\n"],
  "mappings": "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",
  "names": ["StyleToObject", "StyleToObject"]
}
